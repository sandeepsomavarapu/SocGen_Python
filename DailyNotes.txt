
Python:
=========

Language:
			communication with human
		english,telugu
Programming Language

				communication with machine
				
				software-->its collection of programs
							set of instructions

			POP					OOP	
B,BCPL,C,COBOL,PHOTON......		C++,java,python,.net.....

								inheritance,poltmorphisam
								encapsulation,abstraction
				python

Guido Van Rossam 1989

 1991 feb 20th
 
	1.x
	2.x
	3.x


	py --version


	VSCOde


	easy syntax


	helloworld


JAVA
	welcome.java
class Welcome
{
public static void main(String args[])
{
	System.out.println("welcome to india");
}

}	

python

	print("welcome to india")


1)functional programming from C
2)OOp from C++
3)scrpting language features from shellscript
4)modular programming Modula-3



1)desktop apps/standalone apps		core python/tkinter
2) web apps							django/flask
3)db apps                           Pdbc
4)networking apps
5)AI
6)DS
7)ML
8)DA
9)IOT


Features 
========

1)easy to learn
		30+
2)freeware  adn open source			python,jython
3)Platform independent   
4)dynamic typed							123,sandeep,12.3			
5)library


identifier:
============
	any name in python will call it as identifier
a-z
A-Z
0-9		you can use digits but you cannot start digit
_



reserved words

33


'False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def',
 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 
 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield'



Datatypes:
==========
empid -123
ename-->sandeep
esal--23.45
eadd-->hyd

int
float
boolean
string
complex
range
		to hold group values
list
tuple
set
dict
frozenset


	type()
	print()
	id()
	len()
PVM--->address
slice
	input()

	type casting

12 -->"12"

	12+12
	"12"+12-->1212

list--->group of values 

duplicates are allowed
insertion order is preserved 
[]
homogeneous,haterogeneous
		(CC*3/2)+1
		set 10-->20-->40

immutable

a=10 			a---->10<----b
b=10				  /\
c=10				   c	

c=20--->will create new object


*Garbage COllection PYthon

List:
=======
1)insertion order is preserved
2)duplicates are allowed
3)Homogeneous and Haterogeneous objects are allowed
4)growable in nature
5)[] square brackets
6)muttable



Tuple:
=======
1)insertion order is preserved
2)duplicates are allowed
3)Homogeneous and Haterogeneous objects are allowed
4)() parenthosis
5)imuttable



Set:
=======
1)insertion order is not preserved
2)duplicates are not allowed
3)Homogeneous and Haterogeneous objects are allowed
4)growable in nature
5){} square brackets
6)muttable
7)index concept not applicable

FrozenSet:
=========
1)insertion order is not preserved
2)duplicates are not allowed
3)Homogeneous and Haterogeneous objects are allowed
4)not growable in nature
5)({}) square brackets
6)imuttable
7)index concept not applicable

dict:
-----
1)to represent group values as 	key-value pair
2)key must be unique values can be duplicate
3)key/value can be any datatype
4)if we are trying to pass duplicate key then old value replaced with new value
5)muttable


range:
=======
	sequence of values


python files
			.py

	IDE-->VSCODE

	

	3 lines -->functions--->code reusability
	
		def msg():
			return "welcome"
		
		function 
		function
		def
		print("")
		
		String Slice
		
>>> data='abcdefghij'
>>> data[1:6:2]
'bdf'
>>> data[1:6]
'bcdef'
>>> data[::1]
'abcdefghij'
>>> data[::2]
'acegi'
>>> data[::-1]
'jihgfedcba'
>>> data[::-2]
'jhfdb'
>>> data[1:9000]
'bcdefghij'
>>> data[1:9000:1]
'bcdefghij'
>>> data[1:9000:0]		



lambda

	def 
	
	
	
	FILES:
	=========
	
	IO-->write and read

		open
		write
		read
		append
		close
		
	 Regular Expressions:
==========================	 



OOPS:
=======


class

			logical 			car,tree
			physical		hyndai car,toyoto car,



class
	properties(attributes)-->variables
	actions(behaviour)	  -->functions/methods



	
	instance variables(object level variables)
	static variables(class level)
	local variables(method level)
	
	
	instance
	class
	static
	
	
class Employee:

	def	__init__(self)




	instance variables(object level variables)
	static variables(class level)
	local variables(method level)


	1)inside constructor by using self 
	2)inside the method by using self
	3)outside the class by using objref	
		
		
Inheritance:
============
code reusability



class A

	20 methods
	
	
class B(A)
		
		
	30 methods



Garbage Collection:

garbage collector

gc

polymorphisam:
=============



public

	name='india'#public inside the class and outside the class we can access
	_name1='india'#protected inside the class but outside the class only when everit is child we can access
	__atmpin=1111

Exception Handling:
=====================

with out exception handling 

1)system defined error message

2)abnormal termination



Advantages with  exception handling 

1)user friendly error messages

2)normal termination


try--->risky/error code

except

finally

raise

	1) take one class make that as child to the Exception parent class
	2) raise new exception()



try--->

except-->handling code 

finally-->execute always							BaseException

raise
			Exception

		try:    	valid
		except
		
		
		try			valid
		finally
		
		try
		except		valid
		else
		
		try
		finally     invalid
		except
		
		try
		except		valid
		except 
		
		
		try
		except		invalid
		else
		else
		
		
		try
		except		invalid
		finally
		finally
		
		try
			
		print("welcome") invalid
		
		except
		
		try				valid
		except
		
		try 
		except
		
		try
			try
			except
			finally			valid
		except	
		
		try
			
		except	
			try
			except			valid
			finally
		
		
	modules:
=============

test.py

a=123
b=234
def add():
	
	
def sub():

	

one.py
import test as t
from test import add as sum,a
from test import *
import m1,m2,m3
print(a)
add()


package-->folder-->modules-->functions-->variables.......



OS

import os











	
		
		
		
		
		
		
		
			 

		